#version 460
#extension GL_EXT_shader_explicit_arithmetic_types_float32 : require
#extension GL_EXT_nonuniform_qualifier : enable

// Work with 8x8 threads at a time in one workgroup
layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(push_constant) uniform PushConstants {
    int imageIndex;  // Match the type and size above
};

layout(set = 0, binding = 1, rgba8) uniform image2D shadowedSampledImage;
layout(set = 0, binding = 2, rgba8) uniform image2D unshadowedSampledImage;
layout(set = 0, binding = 3, rgba8) uniform image2D denoisedShadowedImage;
layout(set = 0, binding = 4, rgba8) uniform image2D denoisedUnShadowedImage;

void main() {
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);

    vec4 sum = vec4(0.0);
    int count = 0;

    if (imageIndex == 0) {
        ivec2 dims = imageSize(shadowedSampledImage);
        // Larger kernel 7x7
        for (int dy = -3; dy <= 3; ++dy) {
            for (int dx = -3; dx <= 3; ++dx) {
                ivec2 offset = coord + ivec2(dx, dy);
                if (offset.x >= 0 && offset.x < dims.x && offset.y >= 0 && offset.y < dims.y) {
                    sum += imageLoad(shadowedSampledImage, offset);
                    count++;
                }
            }
        }
        imageStore(denoisedShadowedImage, coord, sum / float(count));
    } else {
        ivec2 dims = imageSize(unshadowedSampledImage);
        // Larger kernel 7x7
        for (int dy = -3; dy <= 3; ++dy) {
            for (int dx = -3; dx <= 3; ++dx) {
                ivec2 offset = coord + ivec2(dx, dy);
                if (offset.x >= 0 && offset.x < dims.x && offset.y >= 0 && offset.y < dims.y) {
                    sum += imageLoad(unshadowedSampledImage, offset);
                    count++;
                }
            }
        }
        imageStore(denoisedUnShadowedImage, coord, sum / float(count));
    }
}

