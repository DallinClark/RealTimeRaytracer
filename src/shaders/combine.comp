#version 460
#extension GL_EXT_shader_explicit_arithmetic_types_float32 : require
#extension GL_EXT_nonuniform_qualifier : enable

// Work with 8x8 threads at a time in one workgroup
layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba8) uniform image2D analyticImage;
layout(set = 0, binding = 1, rgba8) uniform image2D sampleShadow;
layout(set = 0, binding = 2, rgba8) uniform image2D sampleUnshadow;
layout(set = 0, binding = 3, rgba8) uniform image2D denoisedShadowedImage;
layout(set = 0, binding = 4, rgba8) uniform image2D denoisedUnshadowedImage;
layout(set = 0, binding = 5, rgba8) uniform image2D finalImage;

layout(push_constant) uniform PushConstants {
    int denoiseOutput;
};


void main() {
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);

    vec4 analytic = imageLoad(analyticImage, coord);
    vec4 shadowed = (denoiseOutput == 0)
                ? imageLoad(sampleShadow, coord)
                : imageLoad(denoisedShadowedImage, coord);
    vec4 unshadowed = (denoiseOutput == 0)
                ? imageLoad(sampleUnshadow, coord)
                : imageLoad(denoisedUnshadowedImage, coord);
    // Avoid divide by zero
    vec3 ratio = shadowed.rgb / max(unshadowed.rgb, vec3(0.001));

    vec3 finalRGB = analytic.rgb * ratio.rgb;


    imageStore(finalImage, coord, vec4(finalRGB, 1.0));
}

