#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#include "raycommon.glsl"
#include "cook-torrance.glsl"

const uint NUM_PRIMARY_RAYS = 1u;
const uint NUM_SHADOW_RAYS = 2u;

layout(set = 0, binding = 0, rgba8) uniform image2D analyticImageOut;
layout(set = 0, binding = 1, rgba8) uniform image2D shadowedSampledImageOut;
layout(set = 0, binding = 2, rgba8) uniform image2D unshadowedSampledImageOut;

layout(set = 1, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 1, binding = 1) uniform CameraUBO {
    GPUCameraData cam;
};
layout(set = 1, binding = 2) readonly buffer VertexBuffer {
    Vertex vertices[];
};
layout(set = 1, binding = 3) readonly buffer IndexBuffer {
    uint indices[];
};
layout(set = 1, binding = 4) uniform sampler2D texSamplers[];
layout(set = 1, binding = 5) readonly buffer ObjectInfoBuffer {
    ObjectInfo objectInfos[];
};
layout(set = 1, binding = 6) readonly buffer LightInfoBuffer {
    LightInfo lightInfos[];
};
layout( push_constant ) uniform constants
{
    uint frame;
    uint numLights;
    uint _pad0;
    uint _pad1;
    vec3 camPosition;
    float padding_;
} sceneData;

vec3 PowVec3(vec3 v, float p)
{
    return vec3(pow(v.x, p), pow(v.y, p), pow(v.z, p));
}
vec3 ToSRGB(vec3 v)   { return PowVec3(v, 1.0/2.2); }

vec3 ACESFilm(vec3 x)
{
    const float a = 2.51;
    const float b = 0.03;
    const float c = 2.43;
    const float d = 0.59;
    const float e = 0.14;
    return clamp((x * (a * x + b)) / (x * (c * x + d) + e), 0.0, 1.0);
}



layout(location = 0) rayPayloadEXT HitInfo payload;
layout(location = 1) rayPayloadEXT bool isShadowed;

const float LUT_SIZE  = 64.0;
const float LUT_SCALE = (LUT_SIZE - 1.0)/LUT_SIZE;
const float LUT_BIAS  = 0.5/LUT_SIZE;

#include "LTC.glsl"

void main() {
    const ivec2 pixelCoord = ivec2(gl_LaunchIDEXT.xy);
    vec3 analyticColor = vec3(0.0);
    vec3 unshadowedSampledColor = vec3(0.0);
    vec3   shadowedSampledColor = vec3(0.0);
    vec3 normal = vec3(0.0);

    for (uint i = 0; i < NUM_PRIMARY_RAYS; i++) {
        //jitter ray target within each pixel
        vec2 jitter = vec2(random(int(pixelCoord + i)), random(int(pixelCoord + i*322)));
        vec2 pixelOffset = (vec2(pixelCoord) + jitter) - vec2(0.5);

        const vec3 pixelWorldPos =
            cam.topLeftViewportCorner +
            pixelOffset.x * cam.horizontalViewportDelta +
            pixelOffset.y * cam.verticalViewportDelta;

        const vec3 rayOrigin = cam.position;
        const vec3 rayDirection = normalize(pixelWorldPos - rayOrigin);

        payload.hitPoint = vec3(0.0);
        payload.normal = vec3(0.0);
        payload.missed = false;

        traceRayEXT(
            topLevelAS,
            gl_RayFlagsOpaqueEXT,
            0xFF,
            0, 0, 0,
            rayOrigin, 0.001,
            rayDirection, 10000.0,
            0
        );
        if (payload.missed) {
            analyticColor += vec3(0.0);
            unshadowedSampledColor += vec3(0.0);
            shadowedSampledColor += vec3(0.0);
            continue;
        }
        if (payload.hitLight) {
            analyticColor += payload.color;
            unshadowedSampledColor += payload.color;
            shadowedSampledColor += payload.color;
            continue;
        }

        vec3 hitPoint         = payload.hitPoint;
        vec3 hitNormal        = payload.normal;
        vec3 viewDir          = normalize(cam.position - hitPoint);
        float roughness       = payload.roughness;
        float metallic        = payload.metallic;
        vec3 color            = payload.color;

        vec3 mDiffuse = (1.0 - metallic) * color;
        vec3 mSpecular = mix(vec3(0.04), color, metallic);
        vec3 N = hitNormal;
        vec3 V = viewDir;
        vec3 P = hitPoint;
        float dotNV = clamp(dot(hitNormal, viewDir), 0.0f, 1.0f);

        // FOR LTC
        // use roughness and sqrt(1-cos_theta) to sample M_texture
        vec2 LUTuv = vec2(roughness, sqrt(1.0f - dotNV));
        LUTuv = LUTuv*LUT_SCALE + LUT_BIAS;

        // get 4 parameters for inverse_M
        vec4 t1 = texture(nonuniformEXT(texSamplers[0]), LUTuv);

        // Get 2 parameters for Fresnel calculation
        vec4 t2 = texture(nonuniformEXT(texSamplers[1]), LUTuv);

        mat3 Minv = mat3(
            vec3(t1.x, 0, t1.y),
            vec3(  0,  1,    0),
            vec3(t1.z, 0, t1.w)
        );


        vec3 result = vec3(0.0);
        vec3 specular = vec3(0.0);
        vec3 diffuse = vec3(0.0);

        // loop through the lights to see their color contribution
        for (uint i = 0; i < sceneData.numLights; ++i) {
           LightInfo currLight = lightInfos[i];

           vec3 shadowedSample = vec3(0.0);
           vec3 unshadowedSample = vec3(0.0);
           

           for (uint i = 0; i < currLight.numTriangles; ++i) {
               uint vertexOffset = currLight.vertexOffset;
               uint indexOffset = currLight.indexOffset;

               uint index0 = indices[(i * 3) + 0 + indexOffset];
               uint index1 = indices[(i * 3)+ 1 + indexOffset];
               uint index2 = indices[(i * 3) + 2 + indexOffset];

               Vertex v0 = vertices[index0 + vertexOffset];
               Vertex v1 = vertices[index1 + vertexOffset];
               Vertex v2 = vertices[index2 + vertexOffset];

               mat4 lightTransform = currLight.transform;

               vec3 translatedPoints[3];
               translatedPoints[0] = (lightTransform * vec4(v0.position, 1.0)).xyz;
               translatedPoints[1] = (lightTransform * vec4(v1.position, 1.0)).xyz;
               translatedPoints[2] = (lightTransform * vec4(v2.position, 1.0)).xyz;


               vec3 lightNormal = cross(translatedPoints[2] - translatedPoints[1], translatedPoints[0] - translatedPoints[1]);
               float area = length(lightNormal) * 0.5;
               float pdf = 1.0 / (area * 0.7);
               lightNormal = normalize(lightNormal);

                if (!currLight.isTwoSided) {
                    if (dot(lightNormal, hitPoint - translatedPoints[0]) < 0.0) {
                        continue;
                   }
                }

               float shadowFactor = 0.0;

               // cast shadow rays
               for (uint s = 0; s < NUM_SHADOW_RAYS; ++s) {
                   // Compute shadow ray direction towards some point on the triangle
                   uvec2 pixel = gl_LaunchIDEXT.xy;
                   uint seed = s + pixel.x * 733 + pixel.y * 1933;
                   float r1 = random(seed);
                   float r2 = random(seed + 100);

                   vec3 lightSamplePos = vec3(0.0);

                   if (r1 + r2 > 1.0) {
                       r1 = 1.0 - r1;
                       r2 = 1.0 - r2;
                   }
                   lightSamplePos = translatedPoints[0] + r1 * (translatedPoints[1] - translatedPoints[0]) + r2 * (translatedPoints[2] - translatedPoints[0]);

                   vec3 sampledLightDir = normalize(lightSamplePos - hitPoint);
                   float lightDistance = length(lightSamplePos - hitPoint);

                   vec3 shadowRayOrigin = hitPoint + hitNormal * 0.01;

                   // Reset shadow payload before trace
                   isShadowed = true;

                   uint shadowFlags = gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT;

                   traceRayEXT(
                       topLevelAS,
                       shadowFlags,
                       0xFF,
                       0, 0, 1,
                       shadowRayOrigin,
                       0.001,
                       sampledLightDir,
                       lightDistance - 0.5,
                       1 // location of shadow ray payload
                   );

                   // if any hit, isShadowed will be true, so shadowFactor only adds when not shadowed
                   float currShadow = isShadowed ? 0.0 : 1.0;
                   shadowFactor += currShadow;

                   vec3 halfVector = normalize(viewDir + sampledLightDir);

                   vec3 F0 = mSpecular;
                   float cosTheta = clamp(dot(viewDir, halfVector), 0.0, 1.0);

                   float D = GGX_Distribution(hitNormal, halfVector, roughness);
                   float G = GGX_PartialGeometryTerm(viewDir, hitNormal, halfVector, roughness) * GGX_PartialGeometryTerm(sampledLightDir, hitNormal, halfVector, roughness);
                   vec3 F = Fresnel_Schlick(cosTheta, F0);

                   float NdotV = max(dot(hitNormal, viewDir), 0.0001);
                   float NdotL = max(dot(hitNormal, sampledLightDir), 0.0001);

                   vec3 currSpecular = (D * F * G) / (4.0 * NdotV * NdotL);
                   vec3 currDiffuse = (1.0 - metallic) * color / PI; // Lambert diffuse term

                   vec3 lightVec = lightSamplePos - hitPoint;
                   float distance = length(lightVec);
                   float attenuation = 1.0 / (distance * distance);

                   vec3 BRDF = currSpecular + currDiffuse;
                   vec3 L = currLight.color * currLight.intensity * NdotL * attenuation * 20.0;

                   shadowedSample   += currShadow * BRDF * L / pdf;
                   unshadowedSample += BRDF * L / pdf;
               }
               shadowedSample   /= float(NUM_SHADOW_RAYS);
               unshadowedSample /= float(NUM_SHADOW_RAYS);

               bool twoSided = currLight.isTwoSided;

               diffuse = LTC_Evaluate(N, V, P, mat3(1), translatedPoints, lightNormal, twoSided);
               specular = LTC_Evaluate(N, V, P, Minv, translatedPoints, lightNormal, twoSided);

               vec3 fresnel = mSpecular * t2.x + (vec3(1.0) - mSpecular) * t2.y;
               specular *= fresnel;

               analyticColor += currLight.color * currLight.intensity * (specular + mDiffuse * diffuse) * 5.0;
               shadowedSampledColor += shadowedSample;
               unshadowedSampledColor += unshadowedSample;
           }
       }
    }

    shadowedSampledColor /= float(NUM_PRIMARY_RAYS);
    unshadowedSampledColor /= float(NUM_PRIMARY_RAYS);
    analyticColor /= float(NUM_PRIMARY_RAYS);

    analyticColor = ACESFilm(analyticColor);
    analyticColor = ToSRGB(analyticColor);

    unshadowedSampledColor = ACESFilm(unshadowedSampledColor);
    unshadowedSampledColor = ToSRGB(unshadowedSampledColor);

    shadowedSampledColor = ACESFilm(shadowedSampledColor);
    shadowedSampledColor = ToSRGB(shadowedSampledColor);


    imageStore(analyticImageOut, pixelCoord, vec4(analyticColor.b, analyticColor.g, analyticColor.r, 1.0));
    imageStore(shadowedSampledImageOut, pixelCoord, vec4(shadowedSampledColor.b, shadowedSampledColor.g, shadowedSampledColor.r, 1.0));
    imageStore(unshadowedSampledImageOut, pixelCoord, vec4(unshadowedSampledColor.b, unshadowedSampledColor.g, unshadowedSampledColor.r, 1.0));

}