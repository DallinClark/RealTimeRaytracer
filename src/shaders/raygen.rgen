#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#include "raycommon.glsl"

const uint NUM_PRIMARY_RAYS = 10u;

layout(set = 0, binding = 0, rgba8) uniform image2D image;
layout(set = 0, binding = 1) uniform accelerationStructureEXT topLevelAS;

layout(set = 0, binding = 2) uniform CameraUBO {
    GPUCameraData cam;
};

layout(location = 0) rayPayloadEXT CombinedPayload payload;

void main() {
    const ivec2 pixelCoord = ivec2(gl_LaunchIDEXT.xy);
    vec3 accumulatedColor = vec3(0.0);

    for (uint i = 0; i < NUM_PRIMARY_RAYS; i++) {
        //jitter ray target within each pixel
        vec2 jitter = vec2(random(int(pixelCoord + i)), random(int(pixelCoord + i*322)));
        vec2 pixelOffset = (vec2(pixelCoord) + jitter) - vec2(0.5);

        const vec3 pixelWorldPos =
            cam.topLeftViewportCorner +
            pixelOffset.x * cam.horizontalViewportDelta +
            pixelOffset.y * cam.verticalViewportDelta;

        const vec3 rayOrigin = cam.position;
        const vec3 rayDirection = normalize(pixelWorldPos - rayOrigin);

        payload.color = vec3(0.0);
        payload.depth = 0;

        traceRayEXT(
            topLevelAS,
            gl_RayFlagsOpaqueEXT,
            0xFF,
            0, 0, 0,
            rayOrigin, 0.001,
            rayDirection, 10000.0,
            0
        );

        accumulatedColor += payload.color;
    }

    accumulatedColor /= float(NUM_PRIMARY_RAYS);

    imageStore(image, pixelCoord, vec4(accumulatedColor.b, accumulatedColor.g, accumulatedColor.r, 1.0));
}
