module;

#include <vulkan/vulkan.hpp>

export module vulkan.types;

export namespace vk {
    using vk::AccelerationStructureKHR;
    using vk::AccelerationStructureBuildGeometryInfoKHR;
    using vk::AccelerationStructureBuildSizesInfoKHR;
    using vk::AccelerationStructureBuildTypeKHR;
    using vk::AccelerationStructureBuildRangeInfoKHR;
    using vk::AccelerationStructureCreateInfoKHR;
    using vk::AccelerationStructureDeviceAddressInfoKHR;
    using vk::AccelerationStructureGeometryKHR;
    using vk::AccelerationStructureGeometryInstancesDataKHR;
    using vk::AccelerationStructureGeometryTrianglesDataKHR;
    using vk::AccelerationStructureInstanceKHR;
    using vk::AccelerationStructureTypeKHR;
    using vk::AccessFlags;
    using vk::AccessFlagBits;
    using vk::ApiVersion12;
    using vk::ApplicationInfo;
    using vk::Bool32;
    using vk::Buffer;
    using vk::BufferCopy;
    using vk::BufferCreateInfo;
    using vk::BufferDeviceAddressInfo;
    using vk::BufferDeviceAddressInfoKHR;
    using vk::BufferUsageFlagBits;
    using vk::BuildAccelerationStructureFlagBitsKHR;
    using vk::BuildAccelerationStructureModeKHR;
    using vk::CommandBuffer;
    using vk::CommandBufferAllocateInfo;
    using vk::CommandBufferBeginInfo;
    using vk::CommandBufferUsageFlagBits;
    using vk::CommandBufferLevel;
    using vk::CommandPool;
    using vk::CommandPoolCreateInfo;
    using vk::CommandPoolCreateFlagBits;
    using vk::CompositeAlphaFlagBitsKHR;
    using vk::createInstanceUnique;
    using vk::DebugUtilsMessengerEXT;
    using vk::DebugUtilsMessengerCreateInfoEXT;
    using vk::DebugUtilsMessengerCallbackDataEXT;
    using vk::DebugUtilsMessageSeverityFlagBitsEXT;
    using vk::DebugUtilsMessageTypeFlagsEXT;
    using vk::DebugUtilsMessageTypeFlagBitsEXT;
    using vk::DescriptorBufferInfo;
    using vk::DescriptorImageInfo;
    using vk::DescriptorPool;
    using vk::DescriptorPoolCreateInfo;
    using vk::DescriptorPoolResetFlags;
    using vk::DescriptorPoolSize;
    using vk::DescriptorSet;
    using vk::DescriptorSetAllocateInfo;
    using vk::DescriptorSetLayout;
    using vk::DescriptorSetLayoutBinding;
    using vk::DescriptorSetLayoutCreateInfo;
    using vk::DescriptorType;
    using vk::Device;
    using vk::DeviceAddress;
    using vk::DeviceCreateInfo;
    using vk::DeviceOrHostAddressConstKHR;
    using vk::DeviceSize;
    using vk::DeviceQueueCreateInfo;
    using vk::enumerateInstanceLayerProperties;
    using vk::Extent2D;
    using vk::Extent3D;
    using vk::EXTDebugUtilsExtensionName;
    using vk::False;
    using vk::Fence;
    using vk::Format;
    using vk::GeometryFlagBitsKHR;
    using vk::GeometryInstanceFlagBitsKHR;
    using vk::GeometryTypeKHR;
    using vk::Image;
    using vk::ImageAspectFlags;
    using vk::ImageAspectFlagBits;
    using vk::ImageCopy;
    using vk::ImageCreateInfo;
    using vk::ImageLayout;
    using vk::ImageMemoryBarrier;
    using vk::ImageTiling;
    using vk::ImageType;
    using vk::ImageUsageFlags;
    using vk::ImageUsageFlagBits;
    using vk::ImageView;
    using vk::ImageViewCreateInfo;
    using vk::ImageViewType;
    using vk::IndexType;
    using vk::Instance;
    using vk::InstanceCreateInfo;
    using vk::KHRAccelerationStructureExtensionName;
    using vk::KHRBufferDeviceAddressExtensionName;
    using vk::KHRDeferredHostOperationsExtensionName;
    using vk::KHRSwapchainExtensionName;
    using vk::KHRRayTracingPipelineExtensionName;
    using vk::EXTDescriptorIndexingExtensionName;
    using vk::makeApiVersion;
    using vk::MappedMemoryRange;
    using vk::MemoryAllocateInfo;
    using vk::MemoryAllocateFlagsInfo;
    using vk::MemoryAllocateFlagBits;
    using vk::MemoryPropertyFlagBits;
    using vk::MemoryRequirements;
    using vk::Pipeline;
    using vk::PipelineBindPoint;
    using vk::PipelineLayout;
    using vk::PipelineLayoutCreateInfo;
    using vk::PipelineShaderStageCreateInfo;
    using vk::PipelineStageFlagBits;
    using vk::PhysicalDevice;
    using vk::PhysicalDeviceFeatures;
    using vk::PhysicalDeviceAccelerationStructureFeaturesKHR;
    using vk::PhysicalDeviceBufferDeviceAddressFeatures;
    using vk::PhysicalDeviceDescriptorIndexingFeatures;
    using vk::PhysicalDeviceMemoryProperties;
    using vk::PhysicalDeviceProperties2;
    using vk::PhysicalDeviceRayTracingPipelineFeaturesKHR;
    using vk::PhysicalDeviceRayTracingPipelinePropertiesKHR;
    using vk::PresentInfoKHR;
    using vk::PresentModeKHR;
    using vk::Queue;
    using vk::QueueFlagBits;
    using vk::QueueFamilyIgnored;
    using vk::RayTracingPipelineCreateInfoKHR;
    using vk::RayTracingShaderGroupCreateInfoKHR;
    using vk::RayTracingShaderGroupTypeKHR;
    using vk::Result;
    using vk::ResultValue;
    using vk::SampleCountFlagBits;
    using vk::SemaphoreCreateInfo;
    using vk::StridedDeviceAddressRegionKHR;
    using vk::ShaderModuleCreateInfo;
    using vk::ShaderStageFlags;
    using vk::ShaderStageFlagBits;
    using vk::ShaderUnusedKHR;
    using vk::SharingMode;
    using vk::StructureType;
    using vk::SubmitInfo;
    using vk::SurfaceKHR;
    using vk::SwapchainKHR;
    using vk::SwapchainCreateInfoKHR;
    using vk::TransformMatrixKHR;
    using vk::True;
    using vk::UniqueAccelerationStructureKHR;
    using vk::UniqueBuffer;
    using vk::UniqueCommandBuffer;
    using vk::UniqueCommandPool;
    using vk::UniqueDebugUtilsMessengerEXT;
    using vk::UniqueDescriptorPool;
    using vk::UniqueDescriptorSetLayout;
    using vk::UniqueDevice;
    using vk::UniqueDeviceMemory;
    using vk::UniqueImage;
    using vk::UniqueImageView;
    using vk::UniqueInstance;
    using vk::UniquePipeline;
    using vk::UniquePipelineLayout;
    using vk::UniqueSemaphore;
    using vk::UniqueShaderModule;
    using vk::UniqueSwapchainKHR;
    using vk::ShaderUnusedKHR;
    using vk::WholeSize;
    using vk::WriteDescriptorSet;
    using vk::WriteDescriptorSetAccelerationStructureKHR;

    using vk::MemoryPropertyFlagBits;
    using vk::MemoryPropertyFlags;
    using vk::BufferUsageFlagBits;
    using vk::BufferUsageFlags;
    using vk::Flags;

    using vk::operator|;
    using vk::operator&;
    using vk::operator~;
    using vk::to_string;
}
