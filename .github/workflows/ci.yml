name: C++-Lint

on:
  pull_request:
  push:

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      #--------------------------------------------------
      # 1. Fetch sources
      #--------------------------------------------------
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      #--------------------------------------------------
      # 2. Install *latest* LLVM/Clang tool-chain
      #--------------------------------------------------
      - name: Install most-recent Clang / LLVM
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg lsb-release
          # Add the rolling LLVM snapshot repository
          wget -qO - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          echo "deb http://apt.llvm.org/$(lsb_release -sc)/ llvm-toolchain-$(lsb_release -sc) main" \
            | sudo tee /etc/apt/sources.list.d/llvm-toolchain.list
          sudo apt-get update
          # Meta-packages without version suffix pull the newest build
          sudo apt-get install -y clang clang++ clang-tidy clang-format lld

      #--------------------------------------------------
      # 3. clang-format (dry-run)
      #--------------------------------------------------
      - name: Run clang-format check
        run: |
          FILES=$(git ls-files '*.c' '*.cc' '*.cpp' '*.cxx' '*.h' '*.hpp')
          clang-format --dry-run --Werror $FILES

      #--------------------------------------------------
      # 4. Configure with CMake (produce compile_commands.json)
      #--------------------------------------------------
      - name: Configure with CMake
        run: |
          cmake -B build -S . \
                -DCMAKE_C_COMPILER=clang \
                -DCMAKE_CXX_COMPILER=clang++ \
                -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
                -DCMAKE_BUILD_TYPE=RelWithDebInfo
          ln -sf build/compile_commands.json .

      #--------------------------------------------------
      # 5. clang-tidy analysis
      #--------------------------------------------------
      - name: Run clang-tidy
        run: |
          FILES=$(git ls-files '*.cc' '*.cpp' '*.cxx')
          clang-tidy --quiet --parallel $(nproc) \
                     --export-fixes=tidy-fixes.yaml \
                     $FILES -p build

      #--------------------------------------------------
      # 6. Upload automatic fixes (optional)
      #--------------------------------------------------
      - name: Upload clang-tidy fixes
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: clang-tidy-fixes
          path: tidy-fixes.yaml
          if-no-files-found: ignore
